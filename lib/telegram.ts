interface TelegramNotification {
  orderId: string
  customerName: string
  customerPhone: string
  totalAmount: number
  items: Array<{
    name: string
    quantity: number
    price: number
  }>
  comment?: string
  contactMethod?: 'telegram' | 'whatsapp'
  customerContact?: string
}

export async function sendTelegramNotification(order: TelegramNotification) {
  const botToken = process.env.TELEGRAM_BOT_TOKEN
  const chatId = process.env.TELEGRAM_CHAT_ID

  if (!botToken || !chatId) {
    console.warn('Telegram bot token or chat ID not configured')
    return
  }

  const itemsText = order.items
    .map(item => `‚Ä¢ ${item.name} - ${item.quantity} —à—Ç. √ó ${item.price.toLocaleString('ru-RU')} ‚ÇΩ`)
    .join('\n')

  const contactInfo = order.contactMethod && order.customerContact
    ? `\nüì± ${order.contactMethod === 'telegram' ? 'Telegram' : 'WhatsApp'}: ${order.customerContact}`
    : ''

  const commentText = order.comment ? `\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${order.comment}` : ''

  const message = `
üéÜ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*

üÜî –ó–∞–∫–∞–∑: #${order.orderId.slice(0, 8)}
üë§ –ö–ª–∏–µ–Ω—Ç: ${order.customerName}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${order.customerPhone}${contactInfo}

üõí *–¢–æ–≤–∞—Ä—ã:*
${itemsText}

üí∞ *–ò—Ç–æ–≥–æ: ${order.totalAmount.toLocaleString('ru-RU')} ‚ÇΩ*${commentText}

‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
  `.trim()

  try {
    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'Markdown',
      }),
    })

    const result = await response.json()
    
    if (!response.ok) {
      console.error('Telegram API error details:', {
        status: response.status,
        error_code: result.error_code,
        description: result.description,
        chat_id: chatId,
        bot_token_length: botToken.length
      })
      throw new Error(`Telegram API error: ${response.status} - ${result.description}`)
    }

    console.log('Telegram notification sent successfully')
  } catch (error) {
    console.error('Failed to send Telegram notification:', error)
    // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ Telegram
    // –ó–∞–∫–∞–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω –¥–∞–∂–µ –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å
  }
}

export async function sendOrderStatusUpdate(orderId: string, status: string, customerName: string) {
  const botToken = process.env.TELEGRAM_BOT_TOKEN
  const chatId = process.env.TELEGRAM_CHAT_ID

  if (!botToken || !chatId) {
    return
  }

  const statusEmoji = {
    'in_progress': 'üîÑ',
    'completed': '‚úÖ',
    'cancelled': '‚ùå'
  }[status] || 'üìù'

  const statusText = {
    'in_progress': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
    'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω',
    'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
  }[status] || status

  const message = `
${statusEmoji} *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞*

üÜî –ó–∞–∫–∞–∑: #${orderId.slice(0, 8)}
üë§ –ö–ª–∏–µ–Ω—Ç: ${customerName}
üìä –°—Ç–∞—Ç—É—Å: ${statusText}

‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
  `.trim()

  try {
    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'Markdown',
      }),
    })

    if (!response.ok) {
      throw new Error(`Telegram API error: ${response.status}`)
    }
  } catch (error) {
    console.error('Failed to send status update notification:', error)
  }
}

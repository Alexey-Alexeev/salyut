import { serve } from "https://deno.land/std@0.168.0/http/server.ts"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const { type, data } = await req.json()

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase
    const TELEGRAM_BOT_TOKEN = Deno.env.get('TELEGRAM_BOT_TOKEN')
    const TELEGRAM_CHAT_ID = Deno.env.get('TELEGRAM_CHAT_ID')

    if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
      throw new Error('Telegram credentials not configured')
    }

    let message = ''

    if (type === 'order') {
      const { order, items } = data
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞
      const shortId = order.id.slice(0, 8)
      const contactMethodText = order.contact_method && order.customer_contact
        ? `\nüì± ${order.contact_method === 'telegram' ? 'Telegram' : order.contact_method === 'whatsapp' ? 'WhatsApp' : '–¢–µ–ª–µ—Ñ–æ–Ω'}: ${order.customer_contact}`
        : ''

      const commentText = order.comment ? `\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${order.comment}` : ''

      const professionalLaunchText = order.professional_launch_requested
        ? '\nüéÜ –ó–∞–ø—É—Å–∫ —Å–∞–ª—é—Ç–æ–≤: *–î–∞* \n‚ö†Ô∏è –û–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ —Å–∞–ª—é—Ç–æ–≤'
        : ''

      const deliveryText = order.delivery_method === 'pickup'
        ? '\nüè¨ **–°–∞–º–æ–≤—ã–≤–æ–∑** (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)\nüìç –†–∞—Å—Å–≤–µ—Ç–Ω–∞—è —É–ª., 14, –¥. –ß—ë—Ä–Ω–æ–µ, –ë–∞–ª–∞—à–∏—Ö–∞'
        : `\nüöö **–î–æ—Å—Ç–∞–≤–∫–∞** - ${order.delivery_cost.toLocaleString('ru-RU')} ‚ÇΩ${order.delivery_address ? `\nüìç ${order.delivery_address}` : '\nüìç _–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Ç–æ—á–Ω–∏—Ç—å_'}`

      const distanceFromMKADText = order.distance_from_mkad
        ? `\nüöó –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –ú–ö–ê–î: ${order.distance_from_mkad} –∫–º`
        : ''

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–∫–∏–¥–∫–∏/–ø–æ–¥–∞—Ä–∫–∞
      let discountInfo = ''
      const subtotal = order.total_amount - order.discount_amount
      if (subtotal >= 60000) {
        discountInfo = `\nüéÅ *–ë–æ–Ω—É—Å—ã:* 10% —Å–∫–∏–¥–∫–∞ + –ø–æ–¥–∞—Ä–æ–∫ –≤–∫–ª—é—á–µ–Ω—ã`
      } else if (subtotal >= 40000) {
        discountInfo = `\nüéÅ *–ë–æ–Ω—É—Å—ã:* 5% —Å–∫–∏–¥–∫–∞ + –ø–æ–¥–∞—Ä–æ–∫ –≤–∫–ª—é—á–µ–Ω—ã`
      } else if (subtotal >= 10000) {
        discountInfo = `\nüéÅ *–ë–æ–Ω—É—Å—ã:* –ø–æ–¥–∞—Ä–æ–∫ –≤–∫–ª—é—á–µ–Ω`
      }

      const itemsText = items
        .map(item => `‚Ä¢ ${item.name} - ${item.quantity} —à—Ç. √ó ${item.price.toLocaleString('ru-RU')} ‚ÇΩ`)
        .join('\n')

      message = `
üéÜ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*

üÜî –ó–∞–∫–∞–∑: #${shortId}
üë§ –ö–ª–∏–µ–Ω—Ç: ${order.customer_name}${contactMethodText}

üõí *–¢–æ–≤–∞—Ä—ã:*
${itemsText}

${deliveryText}${distanceFromMKADText}${discountInfo}${commentText}${professionalLaunchText}

üí∞ *–ò—Ç–æ–≥–æ: ${order.total_amount.toLocaleString('ru-RU')} ‚ÇΩ*

‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}
      `.trim()

    } else if (type === 'consultation') {
      const { consultation } = data
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
      const shortId = consultation.id.slice(0, 8)
      const contactMethodMap: Record<string, string> = {
        phone: 'üìû –¢–µ–ª–µ—Ñ–æ–Ω',
        telegram: 'üì± Telegram',
        whatsapp: 'üì± WhatsApp',
      }
      const contactMethodText = contactMethodMap[consultation.contact_method] || 'üìû –ö–æ–Ω—Ç–∞–∫—Ç'

      const messageText = consultation.message
        ? `\n\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${consultation.message}`
        : ''

      message = `
üéÜ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!*

üÜî ID: #${shortId}
üë§ –ò–º—è: ${consultation.name}
${contactMethodText}: ${consultation.contact_info}${messageText}

‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}
      `.trim()
    } else {
      throw new Error('Invalid notification type')
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    const telegramResponse = await fetch(
      `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: TELEGRAM_CHAT_ID,
          text: message,
          parse_mode: 'Markdown',
        }),
      }
    )

    if (!telegramResponse.ok) {
      const errorData = await telegramResponse.json()
      throw new Error(`Telegram API error: ${JSON.stringify(errorData)}`)
    }

    return new Response(
      JSON.stringify({ success: true }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200 
      }
    )

  } catch (error) {
    console.error('Error sending Telegram notification:', error)
    
    return new Response(
      JSON.stringify({ 
        error: error.message || 'Internal server error' 
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500 
      }
    )
  }
})



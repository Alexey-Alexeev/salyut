#!/usr/bin/env node

/**
 * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç - –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∂–¥–æ–≥–æ URL —á–µ—Ä–µ–∑ GET –∑–∞–ø—Ä–æ—Å
 * (–µ—Å–ª–∏ POST –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
 */

const https = require('https');
const fs = require('fs');
const path = require('path');

const SITE_URL = 'https://salutgrad.ru';
const KEY = '5KTGsAzSgRxtoPKGw5EPQ5R9nlLWPrLk';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–æ–≥–æ URL —á–µ—Ä–µ–∑ GET
function submitSingleUrl(url) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'yandex.com',
      port: 443,
      path: `/indexnow?key=${KEY}&host=${SITE_URL}&url=${encodeURIComponent(url)}`,
      method: 'GET'
    };

    const req = https.request(options, (res) => {
      let responseData = '';
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        resolve({ status: res.statusCode, data: responseData, url });
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    req.end();
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è URL –∏–∑ sitemap.xml
function extractUrlsFromSitemap() {
  const sitemapPath = path.join(__dirname, '../public/sitemap.xml');
  const sitemapContent = fs.readFileSync(sitemapPath, 'utf8');
  
  const urlRegex = /<loc>(https:\/\/salutgrad\.ru\/[^<]+)<\/loc>/g;
  const urls = [];
  let match;
  
  while ((match = urlRegex.exec(sitemapContent)) !== null) {
    const url = match[1];
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if (url.includes('/product/') || url === 'https://salutgrad.ru/') {
      urls.push(url);
    }
  }
  
  return urls;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ URL –≤ –Ø–Ω–¥–µ–∫—Å —á–µ—Ä–µ–∑ GET –∑–∞–ø—Ä–æ—Å—ã...\n');
  
  try {
    const urls = extractUrlsFromSitemap();
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${urls.length} URL —Å—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–æ–¥—É–∫—Ç–æ–≤`);
    
    let successCount = 0;
    let errorCount = 0;
    
    console.log('\nüì¶ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π URL –æ—Ç–¥–µ–ª—å–Ω–æ...\n');
    
    for (let i = 0; i < urls.length; i++) {
      const url = urls[i];
      console.log(`üîÑ ${i + 1}/${urls.length}: ${url}`);
      
      try {
        const result = await submitSingleUrl(url);
        
        if (result.status === 202 || result.status === 200) {
          console.log(`‚úÖ –£—Å–ø–µ—Ö (${result.status})`);
          successCount++;
        } else {
          console.log(`‚ùå –û—à–∏–±–∫–∞ (${result.status}): ${result.data}`);
          errorCount++;
        }
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        if (i < urls.length - 1) {
          await new Promise(resolve => setTimeout(resolve, 100)); // 100ms –ø–∞—É–∑–∞
        }
        
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        errorCount++;
      }
    }
    
    console.log('\n' + '='.repeat(50));
    console.log('–†–ï–ó–£–õ–¨–¢–ê–¢–´:');
    console.log('='.repeat(50));
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    console.log(`üìä –í—Å–µ–≥–æ: ${urls.length}`);
    
    if (successCount > 0) {
      console.log('\nüéâ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –Ø–Ω–¥–µ–∫—Å –Ω–∞—á–Ω–µ—Ç –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é.');
    } else {
      console.log('\n‚ö†Ô∏è  –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –æ—à–∏–±–∫–æ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á.');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

main();

#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JSON-LD —Ä–∞–∑–º–µ—Ç–∫–∏
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */

const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JSON-LD
function validateJsonLd(jsonLd) {
  const errors = [];
  const warnings = [];

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    if (!jsonLd['@context']) {
      errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç @context');
    }

    if (!jsonLd['@type']) {
      errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç @type');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è Product
    if (jsonLd['@type'] === 'Product' || (Array.isArray(jsonLd['@type']) && jsonLd['@type'].includes('Product'))) {
      if (!jsonLd.name) {
        errors.push('Product: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç name');
      }
      
      if (!jsonLd.offers) {
        errors.push('Product: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç offers (—Ç—Ä–µ–±—É–µ—Ç—Å—è Google Search Console)');
      } else {
        if (!jsonLd.offers.price) {
          errors.push('Product: offers –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç price');
        }
        if (!jsonLd.offers.priceCurrency) {
          errors.push('Product: offers –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç priceCurrency');
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ review –∏–ª–∏ aggregateRating
      if (!jsonLd.review && !jsonLd.aggregateRating) {
        warnings.push('Product: —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å review –∏–ª–∏ aggregateRating –¥–ª—è Google Search Console');
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è Offer
    if (jsonLd['@type'] === 'Offer') {
      if (!jsonLd.price) {
        errors.push('Offer: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç price');
      }
      if (!jsonLd.priceCurrency) {
        errors.push('Offer: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç priceCurrency');
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è Review
    if (jsonLd['@type'] === 'Review') {
      if (!jsonLd.author) {
        errors.push('Review: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç author');
      }
      if (!jsonLd.reviewRating) {
        errors.push('Review: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç reviewRating');
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è AggregateRating
    if (jsonLd['@type'] === 'AggregateRating') {
      if (!jsonLd.ratingValue) {
        errors.push('AggregateRating: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ratingValue');
      }
      if (!jsonLd.reviewCount) {
        errors.push('AggregateRating: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç reviewCount');
      }
    }

    return { errors, warnings, valid: errors.length === 0 };
  } catch (error) {
    return { 
      errors: [`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ${error.message}`], 
      warnings: [], 
      valid: false 
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è JSON-LD –∏–∑ HTML
function extractJsonLdFromHtml(htmlContent) {
  const jsonLdRegex = /<script[^>]*type=["']application\/ld\+json["'][^>]*>(.*?)<\/script>/gs;
  const matches = [];
  let match;

  while ((match = jsonLdRegex.exec(htmlContent)) !== null) {
    try {
      const jsonLd = JSON.parse(match[1]);
      matches.push(jsonLd);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON-LD: ${error.message}`);
    }
  }

  return matches;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
function validateSchemaFiles() {
  console.log('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è JSON-LD —Ä–∞–∑–º–µ—Ç–∫–∏...\n');

  const filesToCheck = [
    'app/page.tsx',
    'app/product/[slug]/product-client.tsx',
    'app/catalog/catalog-client.tsx',
    'app/[city]/page.tsx'
  ];

  let totalErrors = 0;
  let totalWarnings = 0;

  filesToCheck.forEach(filePath => {
    const fullPath = path.join(process.cwd(), filePath);
    
    if (!fs.existsSync(fullPath)) {
      console.log(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
      return;
    }

    console.log(`üìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ ${filePath}:`);
    
    try {
      const content = fs.readFileSync(fullPath, 'utf8');
      
      // –ò—â–µ–º JSON-LD –≤ –∫–æ–¥–µ
      const jsonLdMatches = content.match(/JSON\.stringify\([\s\S]*?\)/g);
      
      if (!jsonLdMatches || jsonLdMatches.length === 0) {
        console.log('   ‚ùå JSON-LD —Ä–∞–∑–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }

      let fileErrors = 0;
      let fileWarnings = 0;

      jsonLdMatches.forEach((match, index) => {
        try {
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ JSON.stringify()
          const jsonStr = match.replace(/JSON\.stringify\(/, '').replace(/\)$/, '');
          const jsonLd = eval(`(${jsonStr})`); // –ë–µ–∑–æ–ø–∞—Å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–∞—à –∫–æ–¥
          
          const validation = validateJsonLd(jsonLd);
          
          if (validation.errors.length > 0) {
            console.log(`   ‚ùå JSON-LD #${index + 1}:`);
            validation.errors.forEach(error => {
              console.log(`      - ${error}`);
              fileErrors++;
            });
          }

          if (validation.warnings.length > 0) {
            console.log(`   ‚ö†Ô∏è  JSON-LD #${index + 1}:`);
            validation.warnings.forEach(warning => {
              console.log(`      - ${warning}`);
              fileWarnings++;
            });
          }

          if (validation.valid && validation.warnings.length === 0) {
            console.log(`   ‚úÖ JSON-LD #${index + 1}: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
          }
        } catch (error) {
          console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON-LD #${index + 1}: ${error.message}`);
          fileErrors++;
        }
      });

      totalErrors += fileErrors;
      totalWarnings += fileWarnings;

      if (fileErrors === 0 && fileWarnings === 0) {
        console.log('   ‚úÖ –í—Å–µ JSON-LD —Ä–∞–∑–º–µ—Ç–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
      }

    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${error.message}`);
      totalErrors++;
    }

    console.log('');
  });

  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log('üìä –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç:');
  console.log(`   –û—à–∏–±–∫–∏: ${totalErrors}`);
  console.log(`   –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${totalWarnings}`);
  
  if (totalErrors === 0) {
    console.log('   ‚úÖ –í—Å–µ JSON-LD —Ä–∞–∑–º–µ—Ç–∫–∏ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é!');
    console.log('\nüéâ Google Search Console –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω—è—Ç—å –≤–∞—à–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.');
  } else {
    console.log('   ‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ JSON-LD —Ä–∞–∑–º–µ—Ç–∫–µ');
    console.log('\nüîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å–Ω–æ–≤–∞.');
  }

  return totalErrors === 0;
}

// –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
if (require.main === module) {
  const success = validateSchemaFiles();
  process.exit(success ? 0 : 1);
}

module.exports = { validateJsonLd, extractJsonLdFromHtml, validateSchemaFiles };

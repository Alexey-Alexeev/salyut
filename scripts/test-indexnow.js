/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è IndexNow API
 * –ó–∞–ø—É—Å–∫: node scripts/test-indexnow.js
 */

const INDEXNOW_KEY = '5KTGsAzSgRxtoPKGw5EPQ5R9nlLWPrLk';
const BASE_URL = process.env.NEXT_PUBLIC_SITE_URL || 'https://salutgrad.ru';

async function testIndexNow() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ IndexNow API...\n');

  // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ —Å –∫–ª—é—á–æ–º
  console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ —Å –∫–ª—é—á–æ–º:');
  try {
    const keyFileUrl = `${BASE_URL}/${INDEXNOW_KEY}.txt`;
    const response = await fetch(keyFileUrl);
    
    if (response.ok) {
      const keyContent = await response.text();
      if (keyContent.trim() === INDEXNOW_KEY) {
        console.log('‚úÖ –§–∞–π–ª —Å –∫–ª—é—á–æ–º –Ω–∞–π–¥–µ–Ω –∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω');
        console.log(`   URL: ${keyFileUrl}`);
        console.log(`   –ö–ª—é—á: ${keyContent.trim()}`);
      } else {
        console.log('‚ùå –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á—É');
      }
    } else {
      console.log(`‚ùå –§–∞–π–ª —Å –∫–ª—é—á–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω (${response.status})`);
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞: ${error.message}`);
  }

  console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ URL:');

  // –¢–µ—Å—Ç 2: –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ URL
  try {
    const testUrl = `${BASE_URL}/`;
    const params = new URLSearchParams({
      url: testUrl,
      key: INDEXNOW_KEY,
      host: new URL(BASE_URL).host
    });

    const response = await fetch(`https://yandex.com/indexnow?${params}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    });

    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ URL: ${testUrl}`);
    console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
    
    if (response.status === 202) {
      console.log('‚úÖ URL —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –Ø–Ω–¥–µ–∫—Å');
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${response.status} ${response.statusText}`);
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: ${error.message}`);
  }

  // –¢–µ—Å—Ç 3: –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö URL
  try {
    const testUrls = [
      `${BASE_URL}/`,
      `${BASE_URL}/catalog`,
      `${BASE_URL}/about`
    ];

    const response = await fetch('https://yandex.com/indexnow', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        host: new URL(BASE_URL).host,
        key: INDEXNOW_KEY,
        urlList: testUrls
      }),
    });

    console.log(`\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ ${testUrls.length} URL:`);
    testUrls.forEach(url => console.log(`   - ${url}`));
    console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
    
    if (response.status === 202) {
      console.log('‚úÖ URL —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –Ø–Ω–¥–µ–∫—Å');
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${response.status} ${response.statusText}`);
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: ${error.message}`);
  }

  console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ API endpoint:');

  // –¢–µ—Å—Ç 4: –ß–µ—Ä–µ–∑ –Ω–∞—à API endpoint
  try {
    const apiUrl = `${BASE_URL}/api/indexnow?url=${encodeURIComponent(BASE_URL)}`;
    const response = await fetch(apiUrl);
    const result = await response.json();

    console.log(`üì§ API –∑–∞–ø—Ä–æ—Å: ${apiUrl}`);
    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:`, result);
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ API: ${error.message}`);
  }

  console.log('\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å –∫–ª—é—á–æ–º –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ URL');
  console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤–∞—à —Å–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞');
  console.log('3. –°—Ç–∞—Ç—É—Å 202 –æ–∑–Ω–∞—á–∞–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É');
  console.log('4. –Ø–Ω–¥–µ–∫—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testIndexNow().catch(console.error);


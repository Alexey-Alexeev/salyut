#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ IndexNow API —Å –æ–¥–Ω–∏–º URL
 */

const https = require('https');

const SITE_URL = 'https://salutgrad.ru';
const KEY = '5KTGsAzSgRxtoPKGw5EPQ5R9nlLWPrLk';
const TEST_URL = 'https://salutgrad.ru/';

console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º IndexNow API —Å –æ–¥–Ω–∏–º URL...\n');

// –¢–µ—Å—Ç 1: GET –∑–∞–ø—Ä–æ—Å —Å –æ–¥–Ω–∏–º URL
function testSingleUrl() {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'yandex.com',
      port: 443,
      path: `/indexnow?key=${KEY}&host=${SITE_URL}&url=${encodeURIComponent(TEST_URL)}`,
      method: 'GET'
    };

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET –∑–∞–ø—Ä–æ—Å:');
    console.log(`URL: https://yandex.com${options.path}`);

    const req = https.request(options, (res) => {
      console.log(`\nüì• –û—Ç–≤–µ—Ç:`);
      console.log(`Status: ${res.statusCode}`);
      
      let responseData = '';
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        console.log(`Response: ${responseData || '(–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç)'}`);
        resolve({ status: res.statusCode, data: responseData });
      });
    });

    req.on('error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error);
      reject(error);
    });

    req.end();
  });
}

// –¢–µ—Å—Ç 3: POST –∑–∞–ø—Ä–æ—Å —Å –æ–¥–Ω–∏–º URL (–∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ)
function testPostSingleUrlLikeMain() {
  return new Promise((resolve, reject) => {
    const requestBody = {
      key: KEY,
      host: SITE_URL,
      urlList: [TEST_URL]
    };
    const data = JSON.stringify(requestBody);
    
    const options = {
      hostname: 'yandex.com',
      port: 443,
      path: '/indexnow',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': data.length
      }
    };

    console.log('\nüì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å (–∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ):');
    console.log(`URL: https://yandex.com${options.path}`);
    console.log(`Body: ${data}`);

    const req = https.request(options, (res) => {
      console.log(`\nüì• –û—Ç–≤–µ—Ç:`);
      console.log(`Status: ${res.statusCode}`);
      
      let responseData = '';
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        console.log(`Response: ${responseData || '(–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç)'}`);
        resolve({ status: res.statusCode, data: responseData });
      });
    });

    req.on('error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error);
      reject(error);
    });

    req.write(data);
    req.end();
  });
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
async function runTests() {
  try {
    console.log('üîë –ö–ª—é—á:', KEY);
    console.log('üåê –°–∞–π—Ç:', SITE_URL);
    console.log('üìÑ –¢–µ—Å—Ç–æ–≤—ã–π URL:', TEST_URL);
    
    console.log('\n' + '='.repeat(50));
    console.log('–¢–ï–°–¢ 1: GET –∑–∞–ø—Ä–æ—Å —Å –æ–¥–Ω–∏–º URL');
    console.log('='.repeat(50));
    
    const result1 = await testSingleUrl();
    
    console.log('\n' + '='.repeat(50));
    console.log('–¢–ï–°–¢ 2: POST –∑–∞–ø—Ä–æ—Å —Å –æ–¥–Ω–∏–º URL (–∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ)');
    console.log('='.repeat(50));
    
    const result2 = await testPostSingleUrlLikeMain();
    
    console.log('\n' + '='.repeat(50));
    console.log('–†–ï–ó–£–õ–¨–¢–ê–¢–´:');
    console.log('='.repeat(50));
    console.log(`GET –∑–∞–ø—Ä–æ—Å: ${result1.status === 202 ? '‚úÖ –£—Å–ø–µ—Ö' : '‚ùå –û—à–∏–±–∫–∞'} (${result1.status})`);
    console.log(`POST –∑–∞–ø—Ä–æ—Å: ${result2.status === 202 ? '‚úÖ –£—Å–ø–µ—Ö' : '‚ùå –û—à–∏–±–∫–∞'} (${result2.status})`);
    
    if (result1.status === 202 || result2.status === 202) {
      console.log('\nüéâ –ö–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü—Ä–æ–±–ª–µ–º–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ.');
    } else {
      console.log('\n‚ö†Ô∏è  –ö–ª—é—á –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ù—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–í–µ–±–º–∞—Å—Ç–µ—Ä–µ.');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

runTests();
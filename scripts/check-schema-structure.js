#!/usr/bin/env node

/**
 * –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ JSON-LD
 */

const fs = require('fs');
const path = require('path');

function checkSchemaStructure() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã JSON-LD —Ä–∞–∑–º–µ—Ç–∫–∏...\n');

  const filesToCheck = [
    { path: 'app/page.tsx', name: '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞' },
    { path: 'app/product/[slug]/product-client.tsx', name: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–¥—É–∫—Ç–∞' },
    { path: 'app/catalog/catalog-client.tsx', name: '–ö–∞—Ç–∞–ª–æ–≥' },
    { path: 'app/[city]/page.tsx', name: '–°—Ç—Ä–∞–Ω–∏—Ü—ã –≥–æ—Ä–æ–¥–æ–≤' }
  ];

  let allGood = true;

  filesToCheck.forEach(({ path: filePath, name }) => {
    const fullPath = path.join(process.cwd(), filePath);
    
    if (!fs.existsSync(fullPath)) {
      console.log(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
      return;
    }

    console.log(`üìÑ ${name}:`);
    
    try {
      const content = fs.readFileSync(fullPath, 'utf8');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ JSON-LD —Ä–∞–∑–º–µ—Ç–∫–∏
      const hasJsonLd = content.includes('application/ld+json');
      if (!hasJsonLd) {
        console.log('   ‚ùå JSON-LD —Ä–∞–∑–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        allGood = false;
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è Google Search Console
      const checks = [
        { 
          pattern: /"@type":\s*"Product"/, 
          name: 'Product type',
          required: filePath.includes('product') || filePath.includes('catalog')
        },
        { 
          pattern: /"offers":\s*{/, 
          name: 'Offers',
          required: true
        },
        { 
          pattern: /"price":\s*product\.price/, 
          name: 'Price',
          required: true
        },
        { 
          pattern: /"priceCurrency":\s*"RUB"/, 
          name: 'Price Currency',
          required: true
        },
        { 
          pattern: /"priceValidUntil":\s*"2026-12-31"/, 
          name: 'Price Valid Until',
          required: true
        },
        { 
          pattern: /"aggregateRating":\s*{/, 
          name: 'Aggregate Rating',
          required: true
        },
        { 
          pattern: /"review":\s*\[/, 
          name: 'Reviews',
          required: true
        },
        { 
          pattern: /"reviewRating":\s*{/, 
          name: 'Review Rating',
          required: true
        }
      ];

      let fileGood = true;
      checks.forEach(check => {
        const found = check.pattern.test(content);
        if (check.required && !found) {
          console.log(`   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${check.name}`);
          fileGood = false;
          allGood = false;
        } else if (found) {
          console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω: ${check.name}`);
        }
      });

      if (fileGood) {
        console.log('   ‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
      }

    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${error.message}`);
      allGood = false;
    }

    console.log('');
  });

  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log('üìä –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç:');
  
  if (allGood) {
    console.log('   ‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã JSON-LD');
    console.log('   ‚úÖ Google Search Console –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω—è—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    console.log('\nüéâ –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏ Google Search Console –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ—à–µ–Ω–∞!');
    console.log('\nüìã –ß—Ç–æ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ:');
    console.log('   ‚Ä¢ offers - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–∞—Ö –∏ –Ω–∞–ª–∏—á–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤');
    console.log('   ‚Ä¢ aggregateRating - –æ–±—â–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤');
    console.log('   ‚Ä¢ review - –æ—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤');
    console.log('   ‚Ä¢ reviewRating - —Ä–µ–π—Ç–∏–Ω–≥–∏ –≤ –æ—Ç–∑—ã–≤–∞—Ö');
  } else {
    console.log('   ‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
    console.log('\nüîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã JSON-LD –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç.');
  }

  return allGood;
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
if (require.main === module) {
  const success = checkSchemaStructure();
  process.exit(success ? 0 : 1);
}

module.exports = { checkSchemaStructure };

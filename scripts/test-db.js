// scripts/test-db.js
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * –ó–∞–ø—É—Å–∫: node scripts/test-db.js
 */

require('dotenv').config({ path: '.env.local' })

const { drizzle } = require('drizzle-orm/postgres-js')
const postgres = require('postgres')

async function testConnection() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n')
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:')
  console.log('DATABASE_URL:', process.env.DATABASE_URL ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω')
  console.log('NEXT_PUBLIC_SUPABASE_URL:', process.env.NEXT_PUBLIC_SUPABASE_URL ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω')
  console.log('NEXT_PUBLIC_SUPABASE_ANON_KEY:', process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω')
  console.log('TELEGRAM_BOT_TOKEN:', process.env.TELEGRAM_BOT_TOKEN ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω')
  console.log('TELEGRAM_CHAT_ID:', process.env.TELEGRAM_CHAT_ID ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω')
  
  if (!process.env.DATABASE_URL) {
    console.error('\n‚ùå DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
    console.log('\nüí° –î–æ–±–∞–≤—å—Ç–µ –≤ .env.local:')
    console.log('DATABASE_URL=postgresql://user:password@host:port/database')
    return
  }

  try {
    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    console.log('\nüîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...')
    const connectionString = process.env.DATABASE_URL
    const client = postgres(connectionString, {
      ssl: process.env.PGSSLMODE === 'disable' ? undefined : { rejectUnauthorized: false }
    })
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    const result = await client`SELECT version(), current_database(), current_user`
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!')
    console.log('üìä –í–µ—Ä—Å–∏—è PostgreSQL:', result[0].version.split(' ')[0] + ' ' + result[0].version.split(' ')[1])
    console.log('üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:', result[0].current_database)
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', result[0].current_user)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü:')
    const tables = await client`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      ORDER BY table_name
    `
    
    const expectedTables = ['categories', 'products', 'orders', 'order_items', 'reviews', 'profiles', 'manufacturers']
    
    for (const expectedTable of expectedTables) {
      const exists = tables.some(t => t.table_name === expectedTable)
      console.log(`  ${expectedTable}: ${exists ? '‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã orders
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã orders:')
    try {
      const ordersCount = await client`SELECT COUNT(*) as count FROM orders`
      console.log(`  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: ${ordersCount[0].count}`)
      
      if (parseInt(ordersCount[0].count) > 0) {
        const recentOrders = await client`
          SELECT id, customer_name, created_at 
          FROM orders 
          ORDER BY created_at DESC 
          LIMIT 5
        `
        console.log('  –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:')
        recentOrders.forEach(order => {
          console.log(`    - ${order.id.slice(0, 8)}: ${order.customer_name} (${order.created_at})`)
        })
      }
    } catch (error) {
      console.error('  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã orders:', error.message)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã products
    console.log('\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã products:')
    try {
      const productsCount = await client`SELECT COUNT(*) as count FROM products`
      console.log(`  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: ${productsCount[0].count}`)
    } catch (error) {
      console.error('  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã products:', error.message)
    }

    await client.end()
    console.log('\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!')

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message)
    
    if (error.message.includes('ENOTFOUND')) {
      console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:')
      console.log('  - –ù–µ–≤–µ—Ä–Ω—ã–π —Ö–æ—Å—Ç –≤ DATABASE_URL')
      console.log('  - –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º')
      console.log('  - Supabase –ø—Ä–æ–µ–∫—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    }
    
    if (error.message.includes('password authentication failed')) {
      console.log('\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:')
      console.log('  - –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è –≤ DATABASE_URL')
      console.log('  - –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ Supabase')
    }
    
    if (error.message.includes('database') && error.message.includes('does not exist')) {
      console.log('\nüí° –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:')
      console.log('  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –≤ DATABASE_URL')
      console.log('  - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Supabase –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω')
    }
  }
}

testConnection().catch(console.error)
#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ URL –≤ –Ø–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç IndexNow API –æ—Ç –Ø–Ω–¥–µ–∫—Å–∞
 */

const https = require('https');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const SITE_URL = 'https://salutgrad.ru';
const YANDEX_KEY = process.env.YANDEX_INDEXNOW_KEY || '5KTGsAzSgRxtoPKGw5EPQ5R9nlLWPrLk';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞ –∏–∑ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–∞–π—Ç–µ
async function getKeyFromSite() {
  try {
    const https = require('https');
    
    return new Promise((resolve, reject) => {
      const options = {
        hostname: 'salutgrad.ru',
        port: 443,
        path: '/5KTGsAzSgRxtoPKGw5EPQ5R9nlLWPrLk.txt',
        method: 'GET'
      };

      const req = https.request(options, (res) => {
        let data = '';
        res.on('data', (chunk) => {
          data += chunk;
        });
        
        res.on('end', () => {
          const key = data.trim();
          if (key && key.length > 0) {
            resolve(key);
          } else {
            reject(new Error('–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ'));
          }
        });
      });

      req.on('error', reject);
      req.end();
    });
  } catch (error) {
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á: ' + error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ URL –≤ –Ø–Ω–¥–µ–∫—Å IndexNow
async function submitToYandex(urls, key) {
  let options, data;
  
  if (urls.length === 1) {
    // –î–ª—è –æ–¥–Ω–æ–≥–æ URL –∏—Å–ø–æ–ª—å–∑—É–µ–º GET
    const urlString = urls[0];
    options = {
      hostname: 'yandex.com',
      port: 443,
      path: `/indexnow?key=${key}&host=${SITE_URL}&url=${encodeURIComponent(urlString)}`,
      method: 'GET'
    };
    data = null;
  } else {
    // –î–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö URL –∏—Å–ø–æ–ª—å–∑—É–µ–º POST —Å JSON —Ç–µ–ª–æ–º
    // –ö–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞, –∞ –Ω–µ –≤ URL!
    const requestBody = {
      key: key,
      host: SITE_URL,
      urlList: urls
    };
    data = JSON.stringify(requestBody);
    options = {
      hostname: 'yandex.com',
      port: 443,
      path: '/indexnow',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': data.length
      }
    };
  }

  return new Promise((resolve, reject) => {
    const req = https.request(options, (res) => {
      console.log(`Status: ${res.statusCode}`);
      console.log(`Headers: ${JSON.stringify(res.headers)}`);
      
      let responseData = '';
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        console.log('Response:', responseData);
        resolve({ status: res.statusCode, data: responseData });
      });
    });

    req.on('error', (error) => {
      console.error('Error:', error);
      reject(error);
    });

    if (data) {
      req.write(data); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON —Ç–æ–ª—å–∫–æ –¥–ª—è POST
    }
    req.end();
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è URL –∏–∑ sitemap.xml
function extractUrlsFromSitemap() {
  const sitemapPath = path.join(__dirname, '../public/sitemap.xml');
  const sitemapContent = fs.readFileSync(sitemapPath, 'utf8');
  
  const urlRegex = /<loc>(https:\/\/salutgrad\.ru\/[^<]+)<\/loc>/g;
  const urls = [];
  let match;
  
  while ((match = urlRegex.exec(sitemapContent)) !== null) {
    const url = match[1];
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if (url.includes('/product/') || url === 'https://salutgrad.ru/') {
      urls.push(url);
    }
  }
  
  return urls;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ URL –≤ –Ø–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏...\n');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á
    let key = YANDEX_KEY;
    if (key === '5KTGsAzSgRxtoPKGw5EPQ5R9nlLWPrLk') {
      console.log('üîë –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á IndexNow —Å —Å–∞–π—Ç–∞...');
      try {
        key = await getKeyFromSite();
      } catch (error) {
        console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á —Å —Å–∞–π—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π');
        key = '5KTGsAzSgRxtoPKGw5EPQ5R9nlLWPrLk';
      }
    }
    
    if (!key) {
      console.log('‚ùå –ö–ª—é—á IndexNow –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      return;
    }
    
    console.log('‚úÖ –ö–ª—é—á IndexNow –ø–æ–ª—É—á–µ–Ω');
    // –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ sitemap (—Ç–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤)
    const urls = extractUrlsFromSitemap();
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${urls.length} URL —Å—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ sitemap.xml`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    console.log('\nüìÑ –ü–µ—Ä–≤—ã–µ 10 URL:');
    urls.slice(0, 10).forEach((url, index) => {
      console.log(`${index + 1}. ${url}`);
    });
    
    if (urls.length > 10) {
      console.log(`... –∏ –µ—â–µ ${urls.length - 10} URL`);
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –Ø–Ω–¥–µ–∫—Å (—Ç–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤)
    const batchSize = 50; // –ù–µ–±–æ–ª—å—à–∏–µ –±–∞—Ç—á–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    const batches = [];
    
    for (let i = 0; i < urls.length; i += batchSize) {
      batches.push(urls.slice(i, i + batchSize));
    }
    
    console.log(`\nüì¶ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ${batches.length} –±–∞—Ç—á–µ–π...`);
    
    for (let i = 0; i < batches.length; i++) {
      const method = batches[i].length === 1 ? 'GET' : 'POST';
      console.log(`\nüîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –±–∞—Ç—á–∞ ${i + 1}/${batches.length} (${batches[i].length} URL, –º–µ—Ç–æ–¥: ${method})...`);
      
      const result = await submitToYandex(batches[i], key);
      
      if (result.status === 200) {
        console.log(`‚úÖ –ë–∞—Ç—á ${i + 1} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`);
      } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –≤ –±–∞—Ç—á–µ ${i + 1}: ${result.status}`);
      }
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
      if (i < batches.length - 1) {
        console.log('‚è≥ –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã...');
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    }
    
    console.log('\nüéâ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('\nüìù –ß—Ç–æ –¥–∞–ª—å—à–µ:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –≤ –Ø–Ω–¥–µ–∫—Å.–í–µ–±–º–∞—Å—Ç–µ—Ä–µ');
    console.log('2. –û–±—ã—á–Ω–æ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24-48 —á–∞—Å–æ–≤');
    console.log('3. –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: site:salutgrad.ru');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main();
}

module.exports = { submitToYandex, extractUrlsFromSitemap };

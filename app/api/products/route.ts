import { NextRequest, NextResponse } from 'next/server';
import { db } from '@/lib/db';
import { products } from '@/db/schema';
import { submitProductUrl } from '@/lib/indexnow';

/**
 * API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏
 * POST /api/products - —Å–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä
 * GET /api/products - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
 */

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { name, slug, price, category_id, description, images } = body;

    // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const [newProduct] = await db.insert(products).values({
      name,
      slug,
      price,
      category_id,
      description,
      images,
      is_active: true,
    }).returning();

    // üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –û–¢–ü–†–ê–í–ö–ê –í YANDEX –ß–ï–†–ï–ó INDEXNOW
    try {
      const indexNowResult = await submitProductUrl(slug);
      
      if (indexNowResult.success) {
        console.log(`‚úÖ –¢–æ–≤–∞—Ä ${slug} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –Ø–Ω–¥–µ–∫—Å –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏`);
      } else {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –Ø–Ω–¥–µ–∫—Å: ${indexNowResult.message}`);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ IndexNow:', error);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ IndexNow
    }

    return NextResponse.json({
      success: true,
      product: newProduct,
      indexNow: {
        sent: true,
        message: '–¢–æ–≤–∞—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –Ø–Ω–¥–µ–∫—Å –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏'
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞'
    }, { status: 500 });
  }
}

export async function GET() {
  try {
    const allProducts = await db.select().from(products);
    return NextResponse.json(allProducts);
  } catch (error) {
    return NextResponse.json({
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤'
    }, { status: 500 });
  }
}

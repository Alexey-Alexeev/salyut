'use client'

import { useState, useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Label } from '@/components/ui/label'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'
import { AddressAutocomplete } from '@/components/ui/address-autocomplete'
import { MapPin, Truck, Store, Clock, Phone } from 'lucide-react'
import {
    calculateDelivery,
    extractCityFromAddress,
    formatDeliveryCost,
    getPickupInfo,
    type DeliveryMethod,
    type DeliveryCalculationResult
} from '@/lib/delivery-utils'
import { log } from 'console'

export interface DeliverySelectionProps {
    onDeliveryChange: (result: DeliveryCalculationResult) => void
    selectedMethod?: DeliveryMethod
    initialAddress?: string
    className?: string
}

export function DeliverySelection({
    onDeliveryChange,
    selectedMethod = 'delivery',
    initialAddress = '',
    className = ''
}: DeliverySelectionProps) {
    const [method, setMethod] = useState<DeliveryMethod>(selectedMethod)
    const [address, setAddress] = useState(initialAddress)
    const [distanceFromMKAD, setDistanceFromMKAD] = useState<number | undefined>()
    const [isCalculatingDistance, setIsCalculatingDistance] = useState(false)
    const [deliveryResult, setDeliveryResult] = useState<DeliveryCalculationResult | null>(null)
    console.log('address', address)
    const pickupInfo = getPickupInfo()

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç –ú–ö–ê–î –¥–æ –∞–¥—Ä–µ—Å–∞
    const calculateDistanceFromMKAD = async (addressText: string) => {
        if (!addressText || addressText.length < 10) {
            setDistanceFromMKAD(undefined)
            return
        }

        const apiKey = process.env.NEXT_PUBLIC_YANDEX_API_KEY
        if (!apiKey) {
            console.warn('No Yandex API key for distance calculation')
            return
        }

        setIsCalculatingDistance(true)

        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
            const geocodeResponse = await fetch(
                `https://geocode-maps.yandex.ru/1.x/?apikey=${apiKey}&format=json&geocode=${encodeURIComponent(addressText)}&results=1`
            )

            if (!geocodeResponse.ok) {
                throw new Error('Failed to geocode address')
            }

            const geocodeData = await geocodeResponse.json()
            const geoObjects = geocodeData.response?.GeoObjectCollection?.featureMember || []

            if (geoObjects.length === 0) {
                console.warn('Address not found for distance calculation')
                setDistanceFromMKAD(undefined)
                return
            }

            const coordinates = geoObjects[0].GeoObject.Point.pos.split(' ')
            const deliveryLng = parseFloat(coordinates[0])
            const deliveryLat = parseFloat(coordinates[1])

            // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –ú–æ—Å–∫–≤—ã (–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å)
            const moscowCenterLat = 55.7558
            const moscowCenterLng = 37.6176

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –ú–æ—Å–∫–≤—ã
            const distanceFromCenter = calculateDistanceKm(
                moscowCenterLat, moscowCenterLng,
                deliveryLat, deliveryLng
            )

            // –ú–ö–ê–î –ø—Ä–æ—Ö–æ–¥–∏—Ç –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ 15-25 –∫–º –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–∞–¥–∏—É—Å 19 –∫–º
            const mkadRadius = 15.5

            // –ï—Å–ª–∏ –∞–¥—Ä–µ—Å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ú–ö–ê–î, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ = 0
            if (distanceFromCenter <= mkadRadius) {
                setDistanceFromMKAD(0)
                return
            }

            // –ï—Å–ª–∏ –∑–∞ –ú–ö–ê–î, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –≥—Ä–∞–Ω–∏—Ü—ã –ú–ö–ê–î
            const distanceFromMKAD = Math.max(0, distanceFromCenter - mkadRadius)
            setDistanceFromMKAD(Math.round(distanceFromMKAD))

        } catch (error) {
            console.error('Error calculating distance from MKAD:', error)
            setDistanceFromMKAD(undefined)
        } finally {
            setIsCalculatingDistance(false)
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ (—Ñ–æ—Ä–º—É–ª–∞ –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–æ–≤)
    const calculateDistanceKm = (lat1: number, lon1: number, lat2: number, lon2: number): number => {
        const R = 6371 // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä–∞–¥—É—Å—ã –≤ —Ä–∞–¥–∏–∞–Ω—ã
        const dLat = (lat2 - lat1) * Math.PI / 180
        const dLon = (lon2 - lon1) * Math.PI / 180

        // –§–æ—Ä–º—É–ª–∞ –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–æ–≤
        const a =
            Math.sin(dLat / 2) * Math.sin(dLat / 2) +
            Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
            Math.sin(dLon / 2) * Math.sin(dLon / 2)
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))

        return R * c // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–º
    }

    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    useEffect(() => {
        const city = extractCityFromAddress(address)
        const result = calculateDelivery({
            method,
            address: address || undefined,
            city: city || undefined,
            distanceFromMKAD
        })

        setDeliveryResult(result)
        onDeliveryChange(result)
    }, [method, address, distanceFromMKAD, onDeliveryChange])

    const handleMethodChange = (value: string) => {
        setMethod(value as DeliveryMethod)
    }

    const handleAddressChange = (value: string) => {
        setAddress(value)
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –ú–ö–ê–î
        if (value && value.length > 10) {
            // –î–µ–±–∞—É–Ω—Å –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ API –∑–∞–ø—Ä–æ—Å–æ–≤
            const timeoutId = setTimeout(() => {
                calculateDistanceFromMKAD(value)
            }, 1000)
            return () => clearTimeout(timeoutId)
        } else {
            setDistanceFromMKAD(undefined)
        }
    }

    return (
        <Card className={className}>
            <CardHeader>
                <CardTitle className="flex items-center gap-2">
                    <Truck className="w-5 h-5" />
                    –°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
                </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
                <RadioGroup value={method} onValueChange={handleMethodChange}>
                    {/* –î–æ—Å—Ç–∞–≤–∫–∞ */}
                    <div className="space-y-4">
                        <div className="flex items-center space-x-3">
                            <RadioGroupItem value="delivery" id="delivery" />
                            <Label htmlFor="delivery" className="flex items-center gap-2 cursor-pointer">
                                <Truck className="w-4 h-4 text-blue-600" />
                                <span className="font-medium">üöö –î–æ—Å—Ç–∞–≤–∫–∞</span>
                            </Label>
                        </div>

                        {method === 'delivery' && (
                            <div className="ml-7 space-y-4 border-l-2 border-blue-100 pl-4">
                                <div className="bg-blue-50 p-4 rounded-lg space-y-3">
                                    <h4 className="font-medium text-blue-900">–£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏:</h4>
                                    <div className="text-sm text-blue-700 space-y-1">
                                        <p>‚Ä¢ –ú–æ—Å–∫–≤–∞, –ë–∞–ª–∞—à–∏—Ö–∞, –õ—é–±–µ—Ä—Ü—ã ‚Äî <strong>500 ‚ÇΩ</strong></p>
                                        <p>‚Ä¢ –ó–∞ –ú–ö–ê–î ‚Äî <strong>500 ‚ÇΩ –±–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å + 100 ‚ÇΩ –∑–∞ –∫–∞–∂–¥—ã–π –∫–º</strong></p>
                                        <p>‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ ‚Äî <strong>500 ‚ÇΩ</strong></p>
                                    </div>
                                </div>

                                <div className="space-y-3">
                                    <Label htmlFor="address">–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</Label>
                                    <AddressAutocomplete
                                        id="address"
                                        value={address}
                                        onChange={handleAddressChange}
                                        placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞)..."
                                    />
                                    <p className="text-sm text-muted-foreground">
                                        üí° –ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å ‚Äî —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞–¥—Ä–µ—Å–æ–≤. –ê–¥—Ä–µ—Å –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º ‚Äî –º–µ–Ω–µ–¥–∂–µ—Ä —É—Ç–æ—á–Ω–∏—Ç –µ–≥–æ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
                                    </p>
                                </div>

                                {/* –£–±—Ä–∞–Ω–æ –ø–æ–ª–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è, —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç */}
                                <div className="space-y-3">
                                    <Label>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –ú–ö–ê–î</Label>
                                    <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3">
                                        <p className="text-sm text-yellow-800">
                                            {isCalculatingDistance ? (
                                                <span className="text-blue-600">
                                                    üîÑ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –ú–ö–ê–î...
                                                </span>
                                            ) : distanceFromMKAD !== undefined && address ? (
                                                distanceFromMKAD === 0 ? (
                                                    <span className="text-green-600">
                                                        ‚úÖ –ê–¥—Ä–µ—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ú–ö–ê–î
                                                    </span>
                                                ) : (
                                                    <span className="text-green-600">
                                                        ‚úÖ –ü—Ä–∏–º–µ—Ä–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distanceFromMKAD} –∫–º –æ—Ç –ú–ö–ê–î
                                                    </span>
                                                )
                                            ) : (
                                                <span className="text-gray-600">
                                                    üìç –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏
                                                </span>
                                            )}
                                        </p>
                                    </div>
                                </div>

                                {deliveryResult && deliveryResult.method === 'delivery' && (
                                    <div className="bg-green-50 border border-green-200 rounded-lg p-3">
                                        <p className="font-medium text-green-800">{deliveryResult.description}</p>
                                        <p className="text-lg font-bold text-green-900 mt-1">
                                            –°—Ç–æ–∏–º–æ—Å—Ç—å: {formatDeliveryCost(deliveryResult.cost)}
                                        </p>
                                    </div>
                                )}
                            </div>
                        )}
                    </div>

                    {/* –°–∞–º–æ–≤—ã–≤–æ–∑ */}
                    <div className="space-y-4">
                        <div className="flex items-center space-x-3">
                            <RadioGroupItem value="pickup" id="pickup" />
                            <Label htmlFor="pickup" className="flex items-center gap-2 cursor-pointer">
                                <Store className="w-4 h-4 text-green-600" />
                                <span className="font-medium">üè¨ –°–∞–º–æ–≤—ã–≤–æ–∑</span>
                                <span className="text-sm text-green-600 font-medium">(–±–µ—Å–ø–ª–∞—Ç–Ω–æ)</span>
                            </Label>
                        </div>

                        {method === 'pickup' && (
                            <div className="ml-7 space-y-4 border-l-2 border-green-100 pl-4">
                                <div className="bg-green-50 p-4 rounded-lg space-y-3">
                                    <h4 className="font-medium text-green-900 flex items-center gap-2">
                                        <MapPin className="w-4 h-4" />
                                        –ê–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞:
                                    </h4>
                                    <p className="text-green-800">{pickupInfo.address.fullAddress}</p>

                                    <div className="space-y-2 pt-2 border-t border-green-200">
                                        <div className="flex items-center gap-2 text-sm text-green-700">
                                            <Clock className="w-4 h-4" />
                                            <span>{pickupInfo.workingHours}</span>
                                        </div>
                                        <div className="flex items-center gap-2 text-sm text-green-700">
                                            <Phone className="w-4 h-4" />
                                            <span>{pickupInfo.phone}</span>
                                        </div>
                                    </div>

                                    <p className="text-sm text-green-600 bg-green-100 p-2 rounded">
                                        üí° {pickupInfo.notes}
                                    </p>
                                </div>
                            </div>
                        )}
                    </div>
                </RadioGroup>

                {/* –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                {deliveryResult && (
                    <div className="border-t pt-4">
                        <div className="flex justify-between items-center">
                            <span className="font-medium">
                                {deliveryResult.method === 'delivery' ? '–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:' : '–°–∞–º–æ–≤—ã–≤–æ–∑:'}
                            </span>
                            <span className="text-lg font-bold">
                                {formatDeliveryCost(deliveryResult.cost)}
                            </span>
                        </div>
                    </div>
                )}
            </CardContent>
        </Card>
    )
}